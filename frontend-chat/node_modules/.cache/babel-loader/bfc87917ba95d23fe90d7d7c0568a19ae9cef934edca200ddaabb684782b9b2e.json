{"ast":null,"code":"import { mapActions, mapState } from 'vuex';\nexport default {\n  data() {\n    return {\n      inputTextValue: \"\"\n    };\n  },\n  computed: {\n    ...mapState(['activeChatId', 'currentUserId', 'stompClient'])\n  },\n  methods: {\n    ...mapActions([]),\n    sendMessage() {\n      let trimedInput = this.inputTextValue.trim();\n      if (trimedInput !== '') {\n        const message = {\n          chatRoomId: this.activeChatId,\n          senderId: this.currentUserId,\n          content: this.inputTextValue\n        };\n        const path = '/app/changeMessage/' + this.activeChatId;\n        this.stompClient.send(path, {}, JSON.stringify(message));\n        this.inputTextValue = '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","data","inputTextValue","computed","methods","sendMessage","trimedInput","trim","message","chatRoomId","activeChatId","senderId","currentUserId","content","path","stompClient","send","JSON","stringify"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/components/ChatAreaInput.vue"],"sourcesContent":["<template>\n    <div class=\"input-area\">\n      <div class=\"input-wrapper\">\n        <input\n          type=\"text\"\n          v-model=\"inputTextValue\"\n          placeholder=\"Введите сообщение...\"\n          @keyup.enter=\"sendMessage\"\n          class=\"input-box\"\n        />\n        <button\n          @click=\"sendMessage\"\n          :class=\"{ 'send-btn': true, 'blue-background': inputTextValue, 'white-plane': !inputTextValue }\"\n        >\n          <i class=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n  </template>\n  \n<script>\nimport { mapActions, mapState } from 'vuex';\n\nexport default {\n    data() {\n      return {\n        inputTextValue: \"\",\n      };\n    },\n    computed: {\n      ...mapState([\n        'activeChatId',\n        'currentUserId',\n        'stompClient'\n      ]),\n        \n    },\n    methods: {\n        ...mapActions([\n        ]),\n        sendMessage() {\n            let trimedInput = this.inputTextValue.trim();\n            if (trimedInput !== '') {\n                const message = {\n                chatRoomId: this.activeChatId,\n                senderId: this.currentUserId,\n                content: this.inputTextValue\n                };\n                const path = '/app/changeMessage/' + this.activeChatId;\n                this.stompClient.send(path, {}, JSON.stringify(message));\n                this.inputTextValue = '';\n            }\n            \n        },\n    },\n}\n\n  </script>\n  \n  <style scoped>\n  .input-area {\n    display: flex;\n    align-items: center;\n    padding: 16px;\n    border: 0;\n    margin-top: auto;\n  }\n  \n  .input-wrapper {\n    position: relative;\n    flex: 1;\n  }\n  \n  .input-box {\n    width: 100%;\n    height: 40px; /* Увеличиваем высоту input */\n    padding: 8px 40px 8px 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    outline: none; /* Убираем выделение при наведении курсора */\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Добавляем тень от контура input */\n  }\n  \n  .send-btn {\n    position: absolute;\n    top: 50%;\n    right: 10px;\n    transform: translateY(-50%);\n    padding: 8px;\n    margin: 4px; /* Добавляем промежутки до границ кнопки */\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .send-btn.blue-background {\n    background-color: #007bff;\n  }\n  \n  .send-btn.white-plane {\n    background-color: transparent;\n    color: #007bff; /* Синий цвет самолетика, если нет текста в input */\n  }\n  \n  .send-btn:hover {\n    background-color: #0056b3;\n    color: white; /* Белый цвет самолетика при наведении, если есть текст в input */\n  }\n  \n  .send-btn.white-plane:hover {\n    background-color: #007bff;\n    color: white; /* Белый цвет самолетика при наведении, если нет текста в input */\n  }\n  \n  /* Стили для иконки самолетика (Font Awesome) */\n  .send-btn i {\n    font-size: 16px;\n    transform: rotate(45deg); /* Поворот иконки на -45 градусов (сделает из нее самолетик) */\n  }\n  </style>\n  "],"mappings":"AAqBA,SAASA,UAAU,EAAEC,QAAO,QAAS,MAAM;AAE3C,eAAe;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGH,QAAQ,CAAC,CACV,cAAc,EACd,eAAe,EACf,aAAY,CACb;EAEH,CAAC;EACDI,OAAO,EAAE;IACL,GAAGL,UAAU,CAAC,EACb,CAAC;IACFM,WAAWA,CAAA,EAAG;MACV,IAAIC,WAAU,GAAI,IAAI,CAACJ,cAAc,CAACK,IAAI,CAAC,CAAC;MAC5C,IAAID,WAAU,KAAM,EAAE,EAAE;QACpB,MAAME,OAAM,GAAI;UAChBC,UAAU,EAAE,IAAI,CAACC,YAAY;UAC7BC,QAAQ,EAAE,IAAI,CAACC,aAAa;UAC5BC,OAAO,EAAE,IAAI,CAACX;QACd,CAAC;QACD,MAAMY,IAAG,GAAI,qBAAoB,GAAI,IAAI,CAACJ,YAAY;QACtD,IAAI,CAACK,WAAW,CAACC,IAAI,CAACF,IAAI,EAAE,CAAC,CAAC,EAAEG,IAAI,CAACC,SAAS,CAACV,OAAO,CAAC,CAAC;QACxD,IAAI,CAACN,cAAa,GAAI,EAAE;MAC5B;IAEJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}