{"ast":null,"code":"import { mapActions, mapState } from 'vuex';\nimport { getRandomIndex } from '@/utils/utils';\nexport default {\n  props: {\n    chat: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    ...mapState(['activeChatId']),\n    isActiveChat() {\n      return this.activeChatId === this.chat.roomId;\n    },\n    avatarSrc() {\n      return require(`@/assets/images/avatar_storage/avatar${this.avatarIndex}.jpg`);\n    },\n    formattedTime() {\n      return this.chat.lastMessage.timestamp.substring(11, 16);\n    },\n    unreadMessages() {\n      return 7; // Здесь можно подставить логику подсчета непрочитанных сообщений\n    }\n  },\n\n  data() {\n    return {\n      avatarIndex: getRandomIndex()\n    };\n  },\n  methods: {\n    ...mapActions(['UPDATE_ACTIVE_CHAT', 'SET_ACTIVE_USER']),\n    selectChat(chat) {\n      this.UPDATE_ACTIVE_CHAT(chat);\n      this.$emit('updateActiveChat', chat);\n    },\n    formatContentView(content) {\n      return content ? content.length > 35 ? content.substring(0, 35) : content : '';\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapState","getRandomIndex","props","chat","type","Object","required","computed","isActiveChat","activeChatId","roomId","avatarSrc","require","avatarIndex","formattedTime","lastMessage","timestamp","substring","unreadMessages","data","methods","selectChat","UPDATE_ACTIVE_CHAT","$emit","formatContentView","content","length"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/components/ChatListItem.vue"],"sourcesContent":["<template>\n  <div\n    class=\"chat-item\"\n    @click=\"selectChat(chat)\"\n    :class=\"{ active: isActiveChat }\"\n  >\n    <img :src=\"avatarSrc\" :alt=\"chat.name\" class=\"chat-avatar\" />\n    <div class=\"chat-info\">\n      <div class=\"left-info-item\">\n        <div class=\"chat-name\">{{ chat.interlocutor }}</div>\n        <div class=\"last-message\">{{ chat.lastMessage ? formatContentView(chat.lastMessage.content) : '' }}</div>\n      </div>\n      <div class=\"right-info-item\">\n        <div class=\"time\">{{ chat.lastMessage ? formattedTime : '' }}</div>\n        <div class=\"unreaded-message-count\">\n          <span class=\"circle-counter\">{{ unreadMessages }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport { getRandomIndex } from '@/utils/utils';\n\nexport default {\n  props: {\n    chat: {\n      type: Object,\n      required: true,\n    },\n  },\n  computed: {\n    ...mapState(['activeChatId']),\n    isActiveChat() {\n      return this.activeChatId === this.chat.roomId;\n    },\n    avatarSrc() {\n      return require(`@/assets/images/avatar_storage/avatar${this.avatarIndex}.jpg`);\n    },\n    formattedTime() {\n      return this.chat.lastMessage.timestamp.substring(11, 16);\n    },\n    unreadMessages() {\n      return 7; // Здесь можно подставить логику подсчета непрочитанных сообщений\n    },\n  },\n  data() {\n    return {\n      avatarIndex: getRandomIndex(),\n    };\n  },\n  methods: {\n    ...mapActions(['UPDATE_ACTIVE_CHAT', \n                   'SET_ACTIVE_USER']),\n    selectChat(chat) {\n      this.UPDATE_ACTIVE_CHAT(chat);\n      this.$emit('updateActiveChat', chat);\n    },\n    formatContentView(content) {\n      return content ? (content.length > 35 ? content.substring(0, 35) : content) : '';\n    },\n  },\n};\n</script>\n\n<style scoped>\n.chat-item {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  padding-left: 20px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.chat-item:hover {\n  background-color: #e0ded4;\n}\n\n.active,\n.active:hover {\n  background-color: #fcdd2d;\n}\n\n.chat-avatar {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  margin-right: 10px;\n}\n\n.chat-info {\n  flex: 1;\n  display: inline-flex;\n}\n\n.chat-name {\n  font-weight: bold;\n  font-size: 18px;\n  margin-bottom: 4px;\n  color: #333;\n}\n\n.last-message {\n  font-size: 14px;\n  color: #666;\n  margin-bottom: 8px;\n}\n.unreaded-message-count {\n  font-size: 12px;\n  text-align: center;\n}\n\n.circle-counter {\n  height: 18px;\n  width: 18px;\n  background-color: #bbb;\n  border-radius: 50%;\n  display: inline-block;\n  text-align: center;\n  margin-top: 4px;\n  padding-top: 1px;\n}\n.time {\n  font-size: 14px;\n  color: #888;\n}\n\n.right-info-item {\n  margin-left: auto;\n}\n</style>\n"],"mappings":"AAuBA,SAASA,UAAU,EAAEC,QAAO,QAAS,MAAM;AAC3C,SAASC,cAAa,QAAS,eAAe;AAE9C,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGP,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;IAC7BQ,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACC,YAAW,KAAM,IAAI,CAACN,IAAI,CAACO,MAAM;IAC/C,CAAC;IACDC,SAASA,CAAA,EAAG;MACV,OAAOC,OAAO,CAAE,wCAAuC,IAAI,CAACC,WAAY,MAAK,CAAC;IAChF,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,OAAO,IAAI,CAACX,IAAI,CAACY,WAAW,CAACC,SAAS,CAACC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IAC1D,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,OAAO,CAAC,EAAE;IACZ;EACF,CAAC;;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLN,WAAW,EAAEZ,cAAc,CAAC;IAC9B,CAAC;EACH,CAAC;EACDmB,OAAO,EAAE;IACP,GAAGrB,UAAU,CAAC,CAAC,oBAAoB,EACpB,iBAAiB,CAAC,CAAC;IAClCsB,UAAUA,CAAClB,IAAI,EAAE;MACf,IAAI,CAACmB,kBAAkB,CAACnB,IAAI,CAAC;MAC7B,IAAI,CAACoB,KAAK,CAAC,kBAAkB,EAAEpB,IAAI,CAAC;IACtC,CAAC;IACDqB,iBAAiBA,CAACC,OAAO,EAAE;MACzB,OAAOA,OAAM,GAAKA,OAAO,CAACC,MAAK,GAAI,EAAC,GAAID,OAAO,CAACR,SAAS,CAAC,CAAC,EAAE,EAAE,IAAIQ,OAAO,GAAI,EAAE;IAClF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}