{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { createStore } from 'vuex';\nimport SockJs from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport * as API from '@/api/apiPaths';\n\n// Функции для получения данных из LocalStorage\nconst getSavedDataFromLocalStorage = key => {\n  return JSON.parse(localStorage.getItem(key)) || {};\n};\nconst setSavedDataToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\nconst getAuthTokenFromLocalStorage = key => {\n  const token = JSON.parse(localStorage.getItem(key));\n  if (token) {\n    // state.isAuth = true;\n    return token;\n  } else {\n    // state.isAuth = false;\n    return null;\n  }\n};\nconst stompSubscriptionPlugin = store => {\n  store.subscribe((mutation, state) => {\n    if (mutation.type === 'SET_CHATS_TO_STORE') {\n      // Подписываемся на новые топики\n      state.chats.forEach(chat => {\n        const subscription = state.stompClient.subscribe(`/topic/room/${chat.roomId}`, message => {\n          let json = JSON.parse(message.body);\n          const roomId = json.body.chatRoomId;\n          if (!state.chatMessages[roomId]) {\n            state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n          }\n\n          state.chatMessages[roomId].push(json.body);\n          console.log(`Received message from ${json.body.chatRoomId}: ${json.body.content}`);\n        });\n        console.log(subscription);\n        state.currentSubscriptions.set(chat.roomId, subscription);\n        // Сохраняем подписку в массив для дальнейшей отписки при необходимости\n      });\n    }\n\n    if (mutation.type === 'DELETE_CHAT') {\n      /// TO-DO удалять чаты и подписки;\n    }\n  });\n};\n\n// Определения геттеров, мутаций и действий\nconst state = {\n  isAuth: false,\n  authUser: null,\n  userPgId: -1,\n  token: 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJhdEB5YW5kZXgucnUiLCJpYXQiOjE2OTAzNzczMzEsImV4cCI6MTY5MjEwNTMzMX0.xcm5bXbs71180Bubkax5PSyU0nje2SgZwVVerKUBVPw',\n  chats: [],\n  chatMessages: {},\n  currentSubscriptions: new Map(),\n  currentUserId: '64b8e14a631df963c898ae4a',\n  activeChatId: getSavedDataFromLocalStorage('activeChatId'),\n  activeInterlocutorName: getSavedDataFromLocalStorage('activeInterlocutorName'),\n  stompClient: {},\n  socket: {},\n  stompConnected: false,\n  headerConfig: {\n    headers: {\n      \"Authorization\": `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJhdEB5YW5kZXgucnUiLCJpYXQiOjE2OTAzNzczMzEsImV4cCI6MTY5MjEwNTMzMX0.xcm5bXbs71180Bubkax5PSyU0nje2SgZwVVerKUBVPw`\n    }\n  }\n};\nconst getters = {};\nconst mutations = {\n  SET_USER_TO_STORE(state, user) {\n    state.authUser = user;\n    state.userPgId = user.userId;\n  },\n  SET_MONGO_ID_TO_STORE(state, data) {\n    state.currentUserId = data.id;\n  },\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  ADD_MESSAGE(state, message) {\n    const roomId = message.chatRoomId;\n    if (!state.chatMessages[roomId]) {\n      state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n    }\n\n    state.chatMessages[roomId].push(message);\n  },\n  SET_CHATS_TO_STORE(state, chats) {\n    state.chats = chats;\n  },\n  CLEAR_INTERLOCUTOR_FROM_HEAD(state) {\n    state.activeInterlocutorName = {};\n    state.activeChatId = {};\n  },\n  SET_ACTIVE_CHAT(state, chat) {\n    if (chat) {\n      state.activeInterlocutorName = chat.interlocutor;\n      state.activeChatId = chat.roomId;\n    } else {\n      state.activeInterlocutorName = '';\n      state.activeChatId = null;\n    }\n  },\n  CONNECT_STOMP_SOCK(state) {\n    try {\n      state.socket = new SockJs(API.HOST_NAME + API.WS_PATH);\n      state.stompClient = Stomp.over(state.socket);\n      console.log('WEBSOCKET CONNECTION: ', state.socket, state.stompClient);\n      state.stompClient.connect({}, frame => {\n        console.log(frame);\n        state.stompConnected = true; // Устанавливаем флаг успешного подключения\n      });\n    } catch (e) {\n      console.error('WS CONNECTION ERROR >>', e);\n      state.stompConnected = false; // Устанавливаем флаг неудачного подключения\n    }\n  },\n\n  async START_INIT_CHAT(state) {\n    try {\n      const profileResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + '/profile', state.headerConfig);\n      console.log('Profile: ', profileResponse.data);\n      this.commit('SET_USER_TO_STORE', profileResponse.data);\n      const isExistsResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.CHAT_USERS_CRUD + `/${state.userPgId}`, state.headerConfig);\n      console.log('Existing: ', isExistsResponse.data);\n      this.commit('SET_MONGO_ID_TO_STORE', isExistsResponse.data);\n      const chatsResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.ROOMS_ENDPOINT + `/list?userId=${isExistsResponse.data.id}`, state.headerConfig);\n      console.log('Chats: ', chatsResponse.data);\n      this.commit('SET_CHATS_TO_STORE', chatsResponse.data);\n    } catch (error) {\n      // Обработка ошибок, если необходимо\n      console.error('Ошибка запроса:', error);\n    }\n  },\n  async ADD_NEW_CHAT_ROOM(state, userEmail) {\n    let contain = false;\n    state.chats.forEach(chat => {\n      if (chat.interlocutorProfile.email === userEmail) {\n        contain = true;\n      }\n    });\n    if (contain) {\n      alert(`Chat with ${userEmail} already exists`);\n    } else {\n      try {\n        console.log(userEmail);\n        const interlocutor = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + `/info?userEmail=${userEmail}`, state.headerConfig);\n        console.log('Requesting chat with: ', interlocutor.data);\n        const interlocutorProfile = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + `/${interlocutor.data.userPgId}`, state.headerConfig);\n        console.log('Requesting chat with(PG): ', interlocutorProfile.data);\n        const body = {\n          users: [state.currentUserId, interlocutor.data.id]\n        };\n        const newRoom = await axios.post(API.GATEWAY_PATH + API.API_VERSION + API.ROOMS_ENDPOINT, body, state.headerConfig);\n        console.log('Room created: ', newRoom.data);\n        const room = {\n          roomId: newRoom.data.id,\n          interlocutor: interlocutor.data.userName,\n          interlocutorProfile: interlocutorProfile.data,\n          lastMessage: null\n        };\n        this.commit('ADD_NEW_CHAT_ROOM_TO_STATE', room);\n      } catch (error) {\n        console.error('Ошибка запроса: ', error);\n      }\n    }\n  },\n  ADD_NEW_CHAT_ROOM_TO_STATE(state, newRoom) {\n    state.chats.push(newRoom);\n  }\n};\nconst actions = {\n  ADD_NEW_CHAT({\n    commit\n  }, userEmail) {\n    commit('ADD_NEW_CHAT_ROOM', userEmail);\n  },\n  INIT_CHAT({\n    commit\n  }) {\n    commit('START_INIT_CHAT');\n  },\n  SET_TOKEN({\n    commit\n  }, t) {\n    commit('SET_TOKEN', t);\n  },\n  ESCAPE_FROM_CHAT({\n    commit\n  }) {\n    commit('CLEAR_INTERLOCUTOR_FROM_HEAD');\n  },\n  UPDATE_ACTIVE_CHAT({\n    commit\n  }, chat) {\n    commit('SET_ACTIVE_CHAT', chat);\n  },\n  async SAVE_MESSAGE_TO_DB({\n    commit\n  }, message) {\n    try {\n      const response = await axios.post(API.API_BASE_URL + API.MESSAGES_ENDPOINT, message);\n      console.log('POST response >> ', response.data);\n      return response.data; // Возвращаем данные ответа\n    } catch (error) {\n      console.error('POST request error >> ', error);\n      throw error; // Прокидываем ошибку дальше для обработки в компонентах, если необходимо\n    }\n  },\n\n  CONNECT_TO_WEBSOCKET({\n    commit\n  }) {\n    commit('CONNECT_STOMP_SOCK');\n  },\n  STORE_NEW_MESSAGE({\n    commit\n  }, message) {\n    commit('ADD_MESSAGE', message);\n  }\n};\n\n// Создание Vuex Store с использованием определений выше\nconst store = createStore({\n  state,\n  getters,\n  mutations,\n  actions,\n  plugins: [stompSubscriptionPlugin],\n  modules: {}\n});\n\n// Подписка на изменение состояния и сохранение данных в LocalStorage\nstore.subscribe((mutation, state) => {\n  setSavedDataToLocalStorage('activeChatId', state.activeChatId);\n  setSavedDataToLocalStorage('activeInterlocutorName', state.activeInterlocutorName);\n});\nexport default store;","map":{"version":3,"names":["axios","createStore","SockJs","Stomp","API","getSavedDataFromLocalStorage","key","JSON","parse","localStorage","getItem","setSavedDataToLocalStorage","data","setItem","stringify","getAuthTokenFromLocalStorage","token","stompSubscriptionPlugin","store","subscribe","mutation","state","type","chats","forEach","chat","subscription","stompClient","roomId","message","json","body","chatRoomId","chatMessages","push","console","log","content","currentSubscriptions","set","isAuth","authUser","userPgId","Map","currentUserId","activeChatId","activeInterlocutorName","socket","stompConnected","headerConfig","headers","getters","mutations","SET_USER_TO_STORE","user","userId","SET_MONGO_ID_TO_STORE","id","SET_TOKEN","ADD_MESSAGE","SET_CHATS_TO_STORE","CLEAR_INTERLOCUTOR_FROM_HEAD","SET_ACTIVE_CHAT","interlocutor","CONNECT_STOMP_SOCK","HOST_NAME","WS_PATH","over","connect","frame","e","error","START_INIT_CHAT","profileResponse","get","GATEWAY_PATH","API_VERSION","USERS_CRUD","commit","isExistsResponse","CHAT_USERS_CRUD","chatsResponse","ROOMS_ENDPOINT","ADD_NEW_CHAT_ROOM","userEmail","contain","interlocutorProfile","email","alert","users","newRoom","post","room","userName","lastMessage","ADD_NEW_CHAT_ROOM_TO_STATE","actions","ADD_NEW_CHAT","INIT_CHAT","t","ESCAPE_FROM_CHAT","UPDATE_ACTIVE_CHAT","SAVE_MESSAGE_TO_DB","response","API_BASE_URL","MESSAGES_ENDPOINT","CONNECT_TO_WEBSOCKET","STORE_NEW_MESSAGE","plugins","modules"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/store/index.js"],"sourcesContent":["import axios from 'axios';\nimport { createStore } from 'vuex';\nimport SockJs from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport * as API from '@/api/apiPaths';\n\n// Функции для получения данных из LocalStorage\nconst getSavedDataFromLocalStorage = (key) => {\n  return JSON.parse(localStorage.getItem(key)) || {};\n};\n\nconst setSavedDataToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst getAuthTokenFromLocalStorage = key => {\n  const token = JSON.parse(localStorage.getItem(key));\n  if (token) {\n    // state.isAuth = true;\n    return token;\n  }\n  else {\n    // state.isAuth = false;\n    return null;\n  }\n\n}\n\nconst stompSubscriptionPlugin = (store) => {\n    store.subscribe((mutation, state) => {\n      if (mutation.type === 'SET_CHATS_TO_STORE') {\n        // Подписываемся на новые топики\n        state.chats.forEach(chat => {\n          const subscription = state.stompClient.subscribe(`/topic/room/${chat.roomId}`, message => {\n            let json = JSON.parse(message.body);\n            const roomId = json.body.chatRoomId;\n            if (!state.chatMessages[roomId]) {\n              state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n            }\n            state.chatMessages[roomId].push(json.body);\n            console.log(`Received message from ${json.body.chatRoomId}: ${json.body.content}`);\n          });\n          console.log(subscription);\n          state.currentSubscriptions.set(chat.roomId, subscription);\n          // Сохраняем подписку в массив для дальнейшей отписки при необходимости\n        });\n      }\n      if (mutation.type === 'DELETE_CHAT') {\n        /// TO-DO удалять чаты и подписки;\n      }\n    });\n  };\n\n\n// Определения геттеров, мутаций и действий\nconst state = {\n    isAuth: false,\n    authUser: null,\n    userPgId: -1,\n    token: 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJhdEB5YW5kZXgucnUiLCJpYXQiOjE2OTAzNzczMzEsImV4cCI6MTY5MjEwNTMzMX0.xcm5bXbs71180Bubkax5PSyU0nje2SgZwVVerKUBVPw',\n    chats: [],\n    chatMessages: {},\n    currentSubscriptions: new Map(),\n    currentUserId: '64b8e14a631df963c898ae4a',\n    activeChatId: getSavedDataFromLocalStorage('activeChatId'),\n    activeInterlocutorName: getSavedDataFromLocalStorage('activeInterlocutorName'),\n    stompClient: {},\n    socket: {},\n    stompConnected: false,\n    headerConfig: {\n        headers: {\n            \"Authorization\": `Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJhdEB5YW5kZXgucnUiLCJpYXQiOjE2OTAzNzczMzEsImV4cCI6MTY5MjEwNTMzMX0.xcm5bXbs71180Bubkax5PSyU0nje2SgZwVVerKUBVPw`\n        }\n    }\n};\n\nconst getters = {};\n\nconst mutations = {\n    SET_USER_TO_STORE(state, user) {\n        state.authUser = user;\n        state.userPgId = user.userId;\n    },\n    SET_MONGO_ID_TO_STORE(state, data) {\n        state.currentUserId = data.id;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    ADD_MESSAGE(state, message) {\n        const roomId = message.chatRoomId;\n        if (!state.chatMessages[roomId]) {\n            state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n        }\n        state.chatMessages[roomId].push(message);\n    },\n    SET_CHATS_TO_STORE(state, chats) {\n    state.chats = chats;\n  },\n  CLEAR_INTERLOCUTOR_FROM_HEAD(state) {\n    state.activeInterlocutorName = {};\n    state.activeChatId = {};\n  },\n  SET_ACTIVE_CHAT(state, chat) {\n    if (chat) {\n      state.activeInterlocutorName = chat.interlocutor;\n      state.activeChatId = chat.roomId;\n    } else {\n      state.activeInterlocutorName = '';\n      state.activeChatId = null\n    }\n  },\n  CONNECT_STOMP_SOCK(state) {\n    try {\n      state.socket = new SockJs(API.HOST_NAME + API.WS_PATH);\n      state.stompClient = Stomp.over(state.socket);\n  \n      console.log('WEBSOCKET CONNECTION: ', state.socket, state.stompClient);\n      state.stompClient.connect({}, frame => {\n        console.log(frame);\n        state.stompConnected = true; // Устанавливаем флаг успешного подключения\n      });\n    } catch (e) {\n      console.error('WS CONNECTION ERROR >>', e);\n      state.stompConnected = false; // Устанавливаем флаг неудачного подключения\n    }\n  },\n    async START_INIT_CHAT(state) {\n        try {\n            const profileResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + '/profile', state.headerConfig);\n            console.log('Profile: ', profileResponse.data);\n            this.commit('SET_USER_TO_STORE', profileResponse.data);\n\n            const isExistsResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.CHAT_USERS_CRUD + `/${state.userPgId}`, state.headerConfig);\n            console.log('Existing: ', isExistsResponse.data);\n            this.commit('SET_MONGO_ID_TO_STORE', isExistsResponse.data);\n\n            const chatsResponse = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.ROOMS_ENDPOINT + `/list?userId=${isExistsResponse.data.id}`, state.headerConfig);\n            console.log('Chats: ', chatsResponse.data);\n            this.commit('SET_CHATS_TO_STORE', chatsResponse.data);\n        } catch (error) {\n            // Обработка ошибок, если необходимо\n            console.error('Ошибка запроса:', error);\n        }\n    },\n    async ADD_NEW_CHAT_ROOM(state, userEmail) {\n        let contain = false;\n        state.chats.forEach(chat => {\n            if (chat.interlocutorProfile.email === userEmail) {\n                contain = true;\n            }\n        })\n        if (contain) {\n            alert(`Chat with ${userEmail} already exists`);\n        }\n        else {\n            try {\n                console.log(userEmail);\n                const interlocutor = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + `/info?userEmail=${userEmail}`, state.headerConfig);\n                console.log('Requesting chat with: ', interlocutor.data);\n                const interlocutorProfile = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + `/${interlocutor.data.userPgId}`, state.headerConfig);\n                console.log('Requesting chat with(PG): ', interlocutorProfile.data)\n                const body = {\n                    users: [state.currentUserId, interlocutor.data.id]\n                }\n                const newRoom = await axios.post(API.GATEWAY_PATH + API.API_VERSION + API.ROOMS_ENDPOINT, body, state.headerConfig);\n                console.log('Room created: ', newRoom.data);\n                const room = {\n                    roomId: newRoom.data.id,\n                    interlocutor: interlocutor.data.userName,\n                    interlocutorProfile: interlocutorProfile.data,\n                    lastMessage: null\n                }\n                this.commit('ADD_NEW_CHAT_ROOM_TO_STATE', room);\n            }\n            catch (error) {\n                console.error('Ошибка запроса: ', error);\n            }\n        }\n    },\n    ADD_NEW_CHAT_ROOM_TO_STATE(state, newRoom) {\n        state.chats.push(newRoom);\n    }\n};\n\n\nconst actions = {\n    ADD_NEW_CHAT({ commit }, userEmail) {\n        commit('ADD_NEW_CHAT_ROOM', userEmail);\n    },\n    INIT_CHAT({ commit }) {\n        commit('START_INIT_CHAT');\n    },\n\n\n  SET_TOKEN({ commit }, t) {\n    commit('SET_TOKEN', t);\n  },\n\n  ESCAPE_FROM_CHAT({ commit }) {\n    commit('CLEAR_INTERLOCUTOR_FROM_HEAD');\n  },\n  UPDATE_ACTIVE_CHAT({ commit }, chat) {\n    commit('SET_ACTIVE_CHAT', chat);\n  },\n  async SAVE_MESSAGE_TO_DB({commit}, message) {\n    try {\n      const response = await axios.post(API.API_BASE_URL + API.MESSAGES_ENDPOINT, message);\n      console.log('POST response >> ', response.data);\n      return response.data; // Возвращаем данные ответа\n    } \n    catch (error) {\n      console.error('POST request error >> ', error);\n      throw error; // Прокидываем ошибку дальше для обработки в компонентах, если необходимо\n    }\n  },\n  CONNECT_TO_WEBSOCKET({ commit }) {\n    commit('CONNECT_STOMP_SOCK');\n  },\n  STORE_NEW_MESSAGE({ commit }, message) {\n    commit('ADD_MESSAGE', message);\n}\n};\n\n// Создание Vuex Store с использованием определений выше\nconst store = createStore({\n  state,\n  getters,\n  mutations,\n  actions,\n  plugins: [stompSubscriptionPlugin],\n  modules: {},\n});\n\n// Подписка на изменение состояния и сохранение данных в LocalStorage\nstore.subscribe((mutation, state) => {\n  setSavedDataToLocalStorage('activeChatId', state.activeChatId);\n  setSavedDataToLocalStorage('activeInterlocutorName', state.activeInterlocutorName);\n});\n\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}