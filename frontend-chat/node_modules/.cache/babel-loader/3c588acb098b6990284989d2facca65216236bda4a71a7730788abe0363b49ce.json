{"ast":null,"code":"import { vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-017ed045\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input-area\"\n};\nconst _hoisted_2 = {\n  class: \"input-wrapper\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-paper-plane\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = [_hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.inputTextValue = $event),\n    placeholder: \"Введите сообщение...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    class: \"input-box\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.inputTextValue]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    class: _normalizeClass({\n      'send-btn': true,\n      'blue-background': $data.inputTextValue,\n      'white-plane': !$data.inputTextValue\n    })\n  }, _hoisted_4, 2 /* CLASS */)])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_3","_createElementBlock","_hoisted_1","_hoisted_2","type","$data","inputTextValue","$event","placeholder","onKeyup","_cache","_withKeys","args","$options","sendMessage","onClick","_normalizeClass"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/components/ChatAreaInput.vue"],"sourcesContent":["<template>\n    <div class=\"input-area\">\n      <div class=\"input-wrapper\">\n        <input\n          type=\"text\"\n          v-model=\"inputTextValue\"\n          placeholder=\"Введите сообщение...\"\n          @keyup.enter=\"sendMessage\"\n          class=\"input-box\"\n        />\n        <button\n          @click=\"sendMessage\"\n          :class=\"{ 'send-btn': true, 'blue-background': inputTextValue, 'white-plane': !inputTextValue }\"\n        >\n          <i class=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n  </template>\n  \n<script>\nimport { mapActions, mapState } from 'vuex';\n\nexport default {\n    data() {\n      return {\n        inputTextValue: \"\",\n      };\n    },\n    computed: {\n      ...mapState([\n        'activeChatId',\n        'currentUserId',\n        'stompClient'\n      ]),\n        \n    },\n    methods: {\n        ...mapActions([\n        ]),\n        sendMessage() {\n            let trimedInput = this.inputTextValue.trim();\n            if (trimedInput !== '') {\n                const message = {\n                chatRoomId: this.activeChatId,\n                senderId: this.currentUserId,\n                content: this.inputTextValue\n                };\n                const path = '/app/changeMessage/' + this.activeChatId;\n                this.stompClient.send(path, {}, JSON.stringify(message));\n                this.inputTextValue = '';\n            }\n            \n        },\n    },\n}\n\n  </script>\n  \n  <style scoped>\n  .input-area {\n    display: flex;\n    align-items: center;\n    padding: 16px;\n    border: 0;\n    margin-top: auto;\n  }\n  \n  .input-wrapper {\n    position: relative;\n    flex: 1;\n  }\n  \n  .input-box {\n    width: 100%;\n    height: 40px; /* Увеличиваем высоту input */\n    padding: 8px 40px 8px 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    outline: none; /* Убираем выделение при наведении курсора */\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Добавляем тень от контура input */\n  }\n  \n  .send-btn {\n    position: absolute;\n    top: 50%;\n    right: 10px;\n    transform: translateY(-50%);\n    padding: 8px;\n    margin: 4px; /* Добавляем промежутки до границ кнопки */\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .send-btn.blue-background {\n    background-color: #007bff;\n  }\n  \n  .send-btn.white-plane {\n    background-color: transparent;\n    color: #007bff; /* Синий цвет самолетика, если нет текста в input */\n  }\n  \n  .send-btn:hover {\n    background-color: #0056b3;\n    color: white; /* Белый цвет самолетика при наведении, если есть текст в input */\n  }\n  \n  .send-btn.white-plane:hover {\n    background-color: #007bff;\n    color: white; /* Белый цвет самолетика при наведении, если нет текста в input */\n  }\n  \n  /* Стили для иконки самолетика (Font Awesome) */\n  .send-btn i {\n    font-size: 16px;\n    transform: rotate(45deg); /* Поворот иконки на -45 градусов (сделает из нее самолетик) */\n  }\n  </style>\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAe;gEAYtBC,mBAAA,CAAkC;EAA/BD,KAAK,EAAC;AAAoB;oBAA7BE,UAAkC,C;;uBAbxCC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJH,mBAAA,CAcM,OAdNI,UAcM,G,gBAbJJ,mBAAA,CAME;IALAK,IAAI,EAAC,MAAM;+DACFC,KAAA,CAAAC,cAAc,GAAAC,MAAA;IACvBC,WAAW,EAAC,sBAAsB;IACjCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACzBd,KAAK,EAAC;iEAHGO,KAAA,CAAAC,cAAc,E,GAKzBP,mBAAA,CAKS;IAJNgB,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAClBd,KAAK,EAAAkB,eAAA;MAAA;MAAA,mBAAyCX,KAAA,CAAAC,cAAc;MAAA,gBAAkBD,KAAA,CAAAC;IAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}