{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-list\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_chat_list_item = _resolveComponent(\"chat-list-item\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.chats, chat => {\n    return _openBlock(), _createBlock(_component_chat_list_item, {\n      key: chat.roomId,\n      chat: chat,\n      onUpdateActiveChat: $options.updateActiveChat\n    }, null, 8 /* PROPS */, [\"chat\", \"onUpdateActiveChat\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","_ctx","chats","chat","_createBlock","_component_chat_list_item","key","roomId","onUpdateActiveChat","$options","updateActiveChat"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/components/ChatList.vue"],"sourcesContent":["<template>\n      <div class=\"chat-list\">\n        <chat-list-item\n          v-for=\"chat in chats\"\n          :key=\"chat.roomId\"\n          :chat=\"chat\"\n          @updateActiveChat=\"updateActiveChat\"/>\n      </div>\n</template>\n  \n<script>\nimport ChatListItem from '@/components/ChatListItem.vue';\nimport {mapActions, mapState} from 'vuex';\n\n\n  export default {\n    components: {ChatListItem},\n    data() {\n      return {}\n    },\n    computed: {\n      ...mapState([\n        'chats',\n        'activeChatId',\n          'token',\n          'authUser'\n      ])\n    },\n    methods: {\n      ...mapActions([\n      'FETCH_CHATS',\n      'SET_ACTIVE_USER',\n          'USER_IS_EXIST_IN_CHAT'\n    ]),\n\n    updateActiveChat(chat) {\n      this.$router.push({\n        path: 'chat',\n        query: {'roomId': chat.roomId},\n      })\n    },\n  },\n  mounted() {\n\n      setTimeout(() => {\n        this.FETCH_CHATS(this.token, this.authUser);\n      }, 100);\n    }\n}\n  \n  </script>\n  \n  <style>\n  .chat-list {\n    flex: 1;\n    overflow-y: auto;\n  }\n  </style>\n  "],"mappings":";;EACWA,KAAK,EAAC;AAAW;;;uBAAtBC,mBAAA,CAMM,OANNC,UAMM,I,kBALJD,mBAAA,CAIwCE,SAAA,QAAAC,WAAA,CAHvBC,IAAA,CAAAC,KAAK,EAAbC,IAAI;yBADbC,YAAA,CAIwCC,yBAAA;MAFrCC,GAAG,EAAEH,IAAI,CAACI,MAAM;MAChBJ,IAAI,EAAEA,IAAI;MACVK,kBAAgB,EAAEC,QAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}