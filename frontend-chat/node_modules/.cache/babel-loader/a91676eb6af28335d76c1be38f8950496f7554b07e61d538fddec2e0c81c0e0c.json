{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { createStore } from 'vuex';\nimport SockJs from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport * as API from '@/api/apiPaths';\n\n// Функции для получения данных из LocalStorage\nconst getSavedDataFromLocalStorage = key => {\n  return JSON.parse(localStorage.getItem(key)) || {};\n};\nconst setSavedDataToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\nconst getAuthTokenFromLocalStorage = key => {\n  const token = JSON.parse(localStorage.getItem(key));\n  if (token) {\n    // state.isAuth = true;\n    return token;\n  } else {\n    // state.isAuth = false;\n    return null;\n  }\n};\nconst stompSubscriptionPlugin = store => {\n  store.subscribe((mutation, state) => {\n    if (mutation.type === 'SET_CHATS_TO_STORE') {\n      // Подписываемся на новые топики\n      state.chats.forEach(chat => {\n        const subscription = state.stompClient.subscribe(`/topic/room/${chat.roomId}`, message => {\n          let json = JSON.parse(message.body);\n          const roomId = json.body.chatRoomId;\n          if (!state.chatMessages[roomId]) {\n            state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n          }\n\n          state.chatMessages[roomId].push(json.body);\n          console.log(`Received message from ${json.body.chatRoomId}: ${json.body.content}`);\n        });\n        console.log(subscription);\n        state.currentSubscriptions.set(chat.roomId, subscription);\n        // Сохраняем подписку в массив для дальнейшей отписки при необходимости\n      });\n    }\n\n    if (mutation.type === 'DELETE_CHAT') {\n      /// TO-DO удалять чаты и подписки;\n    }\n  });\n};\n\n// Определения геттеров, мутаций и действий\nconst state = {\n  isAuth: false,\n  authUser: null,\n  token: 'localStorage.getItem(\"token\") || null,',\n  chats: [],\n  chatMessages: {},\n  currentSubscriptions: new Map(),\n  currentUserId: '64b8e14a631df963c898ae4a',\n  activeChatId: getSavedDataFromLocalStorage('activeChatId'),\n  activeInterlocutorName: getSavedDataFromLocalStorage('activeInterlocutorName'),\n  stompClient: {},\n  socket: {},\n  stompConnected: false\n};\nconst getters = {};\nconst mutations = {\n  SET_USER_TO_STORE(state, user) {\n    state.authUser = user;\n  },\n  SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  ADD_MESSAGE(state, message) {\n    const roomId = message.chatRoomId;\n    if (!state.chatMessages[roomId]) {\n      state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n    }\n\n    state.chatMessages[roomId].push(message);\n  },\n  SET_CHATS_TO_STORE(state, chats) {\n    state.chats = chats;\n  },\n  CLEAR_INTERLOCUTOR_FROM_HEAD(state) {\n    state.activeInterlocutorName = {};\n    state.activeChatId = {};\n  },\n  SET_ACTIVE_CHAT(state, chat) {\n    if (chat) {\n      state.activeInterlocutorName = chat.interlocutor;\n      state.activeChatId = chat.roomId;\n    } else {\n      state.activeInterlocutorName = '';\n      state.activeChatId = null;\n    }\n  },\n  CONNECT_STOMP_SOCK(state) {\n    try {\n      state.socket = new SockJs(API.HOST_NAME + API.WS_PATH);\n      state.stompClient = Stomp.over(state.socket);\n      console.log('WEBSOCKET CONNECTION: ', state.socket, state.stompClient);\n      state.stompClient.connect({}, frame => {\n        console.log(frame);\n        state.stompConnected = true; // Устанавливаем флаг успешного подключения\n      });\n    } catch (e) {\n      console.error('WS CONNECTION ERROR >>', e);\n      state.stompConnected = false; // Устанавливаем флаг неудачного подключения\n    }\n  }\n};\n\nconst actions = {\n  async FETCH_USER_DATA({\n    commit\n  }, token) {\n    try {\n      if (token !== null) {\n        const config = {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        };\n        const user = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.USERS_CRUD + '/profile', config);\n        console.log('GET response >>', user.data);\n        setTimeout(() => {\n          commit('SET_USER_TO_STORE', user.data);\n        }, 350);\n      }\n    } catch (error) {\n      console.error('GET request error >> ', error);\n    }\n  },\n  SET_TOKEN({\n    commit\n  }, t) {\n    commit('SET_TOKEN', t);\n  },\n  async FETCH_CHATS({\n    commit\n  }, token) {\n    try {\n      if (token !== null) {\n        const config = {\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        };\n        const chats = await axios.get(API.GATEWAY_PATH + API.API_VERSION + API.ROOMS_ENDPOINT + '   /test?userId=64b8e14a631df963c898ae4a', config);\n        console.log('GET response >> ', chats);\n        setTimeout(() => {\n          commit('SET_CHATS_TO_STORE', chats.data);\n        }, 350);\n      }\n    } catch (error) {\n      console.error('GET request error >> ', error);\n    }\n  },\n  ESCAPE_FROM_CHAT({\n    commit\n  }) {\n    commit('CLEAR_INTERLOCUTOR_FROM_HEAD');\n  },\n  UPDATE_ACTIVE_CHAT({\n    commit\n  }, chat) {\n    commit('SET_ACTIVE_CHAT', chat);\n  },\n  async SAVE_MESSAGE_TO_DB({\n    commit\n  }, message) {\n    try {\n      const response = await axios.post(API.API_BASE_URL + API.MESSAGES_ENDPOINT, message);\n      console.log('POST response >> ', response.data);\n      return response.data; // Возвращаем данные ответа\n    } catch (error) {\n      console.error('POST request error >> ', error);\n      throw error; // Прокидываем ошибку дальше для обработки в компонентах, если необходимо\n    }\n  },\n\n  CONNECT_TO_WEBSOCKET({\n    commit\n  }) {\n    commit('CONNECT_STOMP_SOCK');\n  },\n  STORE_NEW_MESSAGE({\n    commit\n  }, message) {\n    commit('ADD_MESSAGE', message);\n  }\n};\n\n// Создание Vuex Store с использованием определений выше\nconst store = createStore({\n  state,\n  getters,\n  mutations,\n  actions,\n  plugins: [stompSubscriptionPlugin],\n  modules: {}\n});\n\n// Подписка на изменение состояния и сохранение данных в LocalStorage\nstore.subscribe((mutation, state) => {\n  setSavedDataToLocalStorage('activeChatId', state.activeChatId);\n  setSavedDataToLocalStorage('activeInterlocutorName', state.activeInterlocutorName);\n});\nexport default store;","map":{"version":3,"names":["axios","createStore","SockJs","Stomp","API","getSavedDataFromLocalStorage","key","JSON","parse","localStorage","getItem","setSavedDataToLocalStorage","data","setItem","stringify","getAuthTokenFromLocalStorage","token","stompSubscriptionPlugin","store","subscribe","mutation","state","type","chats","forEach","chat","subscription","stompClient","roomId","message","json","body","chatRoomId","chatMessages","push","console","log","content","currentSubscriptions","set","isAuth","authUser","Map","currentUserId","activeChatId","activeInterlocutorName","socket","stompConnected","getters","mutations","SET_USER_TO_STORE","user","SET_TOKEN","ADD_MESSAGE","SET_CHATS_TO_STORE","CLEAR_INTERLOCUTOR_FROM_HEAD","SET_ACTIVE_CHAT","interlocutor","CONNECT_STOMP_SOCK","HOST_NAME","WS_PATH","over","connect","frame","e","error","actions","FETCH_USER_DATA","commit","config","headers","get","GATEWAY_PATH","API_VERSION","USERS_CRUD","setTimeout","t","FETCH_CHATS","ROOMS_ENDPOINT","ESCAPE_FROM_CHAT","UPDATE_ACTIVE_CHAT","SAVE_MESSAGE_TO_DB","response","post","API_BASE_URL","MESSAGES_ENDPOINT","CONNECT_TO_WEBSOCKET","STORE_NEW_MESSAGE","plugins","modules"],"sources":["/Users/fyodor/Desktop/tinkoff-pm/spring-micro-demo/spring-micro-demo/frontend-chat/src/store/index.js"],"sourcesContent":["import axios from 'axios';\nimport { createStore } from 'vuex';\nimport SockJs from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport * as API from '@/api/apiPaths';\n\n// Функции для получения данных из LocalStorage\nconst getSavedDataFromLocalStorage = (key) => {\n  return JSON.parse(localStorage.getItem(key)) || {};\n};\n\nconst setSavedDataToLocalStorage = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nconst getAuthTokenFromLocalStorage = key => {\n  const token = JSON.parse(localStorage.getItem(key));\n  if (token) {\n    // state.isAuth = true;\n    return token;\n  }\n  else {\n    // state.isAuth = false;\n    return null;\n  }\n\n}\n\nconst stompSubscriptionPlugin = (store) => {\n    store.subscribe((mutation, state) => {\n      if (mutation.type === 'SET_CHATS_TO_STORE') {\n        // Подписываемся на новые топики\n        state.chats.forEach(chat => {\n          const subscription = state.stompClient.subscribe(`/topic/room/${chat.roomId}`, message => {\n            let json = JSON.parse(message.body);\n            const roomId = json.body.chatRoomId;\n            if (!state.chatMessages[roomId]) {\n              state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n            }\n            state.chatMessages[roomId].push(json.body);\n            console.log(`Received message from ${json.body.chatRoomId}: ${json.body.content}`);\n          });\n          console.log(subscription);\n          state.currentSubscriptions.set(chat.roomId, subscription);\n          // Сохраняем подписку в массив для дальнейшей отписки при необходимости\n        });\n      }\n      if (mutation.type === 'DELETE_CHAT') {\n        /// TO-DO удалять чаты и подписки;\n      }\n    });\n  };\n\n\n// Определения геттеров, мутаций и действий\nconst state = {\n    isAuth: false,\n    authUser: null,\n    token: 'localStorage.getItem(\"token\") || null,',\n    chats: [],\n    chatMessages: {},\n    currentSubscriptions: new Map(),\n    currentUserId: '64b8e14a631df963c898ae4a',\n    activeChatId: getSavedDataFromLocalStorage('activeChatId'),\n    activeInterlocutorName: getSavedDataFromLocalStorage('activeInterlocutorName'),\n    stompClient: {},\n    socket: {},\n    stompConnected: false\n};\n\nconst getters = {};\n\nconst mutations = {\n    SET_USER_TO_STORE(state, user) {\n        state.authUser = user;\n    },\n    SET_TOKEN(state, token) {\n      state.token = token;\n    },\n    ADD_MESSAGE(state, message) {\n        const roomId = message.chatRoomId;\n        if (!state.chatMessages[roomId]) {\n            state.chatMessages[roomId] = []; // Создаем пустой массив, если комнаты еще нет в хранилище\n        }\n        state.chatMessages[roomId].push(message);\n    },\n    SET_CHATS_TO_STORE(state, chats) {\n    state.chats = chats;\n  },\n  CLEAR_INTERLOCUTOR_FROM_HEAD(state) {\n    state.activeInterlocutorName = {};\n    state.activeChatId = {};\n  },\n  SET_ACTIVE_CHAT(state, chat) {\n    if (chat) {\n      state.activeInterlocutorName = chat.interlocutor;\n      state.activeChatId = chat.roomId;\n    } else {\n      state.activeInterlocutorName = '';\n      state.activeChatId = null\n    }\n  },\n  CONNECT_STOMP_SOCK(state) {\n    try {\n      state.socket = new SockJs(API.HOST_NAME + API.WS_PATH);\n      state.stompClient = Stomp.over(state.socket);\n  \n      console.log('WEBSOCKET CONNECTION: ', state.socket, state.stompClient);\n      state.stompClient.connect({}, frame => {\n        console.log(frame);\n        state.stompConnected = true; // Устанавливаем флаг успешного подключения\n      });\n    } catch (e) {\n      console.error('WS CONNECTION ERROR >>', e);\n      state.stompConnected = false; // Устанавливаем флаг неудачного подключения\n    }\n  }\n};\n\nconst actions = {\n  async FETCH_USER_DATA({ commit }, token) {\n    try {\n        if (token !== null) {\n            const config = {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            }\n            const user = await axios.get(API.GATEWAY_PATH\n                + API.API_VERSION\n                + API.USERS_CRUD\n                + '/profile', config);\n\n            console.log('GET response >>', user.data);\n            setTimeout(() => {\n                commit('SET_USER_TO_STORE', user.data);\n            }, 350);\n        }\n    }\n    catch(error) {\n      console.error('GET request error >> ', error);\n    }\n  },\n  SET_TOKEN({ commit }, t) {\n    commit('SET_TOKEN', t);\n  },\n  async FETCH_CHATS({ commit }, token) {\n    try {\n        if (token !== null) {\n            const config = {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`\n                }\n            }\n            const chats = await axios\n                .get(API.GATEWAY_PATH +\n                         API.API_VERSION +\n                         API.ROOMS_ENDPOINT +\n                    '   /test?userId=64b8e14a631df963c898ae4a', config);\n            console.log('GET response >> ', chats)\n            setTimeout(() => {\n                commit('SET_CHATS_TO_STORE', chats.data);\n            }, 350);\n        }\n\n    } catch (error) {\n      console.error('GET request error >> ', error);\n    }\n  },\n  ESCAPE_FROM_CHAT({ commit }) {\n    commit('CLEAR_INTERLOCUTOR_FROM_HEAD');\n  },\n  UPDATE_ACTIVE_CHAT({ commit }, chat) {\n    commit('SET_ACTIVE_CHAT', chat);\n  },\n  async SAVE_MESSAGE_TO_DB({commit}, message) {\n    try {\n      const response = await axios.post(API.API_BASE_URL + API.MESSAGES_ENDPOINT, message);\n      console.log('POST response >> ', response.data);\n      return response.data; // Возвращаем данные ответа\n    } \n    catch (error) {\n      console.error('POST request error >> ', error);\n      throw error; // Прокидываем ошибку дальше для обработки в компонентах, если необходимо\n    }\n  },\n  CONNECT_TO_WEBSOCKET({ commit }) {\n    commit('CONNECT_STOMP_SOCK');\n  },\n  STORE_NEW_MESSAGE({ commit }, message) {\n    commit('ADD_MESSAGE', message);\n}\n};\n\n// Создание Vuex Store с использованием определений выше\nconst store = createStore({\n  state,\n  getters,\n  mutations,\n  actions,\n  plugins: [stompSubscriptionPlugin],\n  modules: {},\n});\n\n// Подписка на изменение состояния и сохранение данных в LocalStorage\nstore.subscribe((mutation, state) => {\n  setSavedDataToLocalStorage('activeChatId', state.activeChatId);\n  setSavedDataToLocalStorage('activeInterlocutorName', state.activeInterlocutorName);\n});\n\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}