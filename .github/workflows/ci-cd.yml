name: Docker Image CI

on:
  push:
    branches: [ "main" ]

env:
  TASK_EXECUTOR_NAME: task-executor
  TASK_MICROSERVICE_NAME: task-microservice
  CRUD_MICROSERVICE_NAME: crud-microservice
  AUTH_MICROSERVICE_NAME: auth-microservice
  EUREKA_SERVICE_NAME: eureka-server
  API_GATEWAY_NAME: api-gateway
  FRONTEND_NAME: frontend
  TASK_EXECUTOR_IMAGE: ghcr.io/${{ github.repository_owner }}/task-executor:latest
  TASK_MICROSERVICE_IMAGE: ghcr.io/${{ github.repository_owner }}/task-microservice:latest
  CRUD_MICROSERVICE_IMAGE: ghcr.io/${{ github.repository_owner }}/crud-microservice:latest
  AUTH_MICROSERVICE_IMAGE: ghcr.io/${{ github.repository_owner }}/auth-microservice:latest
  EUREKA_SERVICE_IMAGE: ghcr.io/${{ github.repository_owner }}/eureka-server:latest
  API_GATEWAY_IMAGE: ghcr.io/${{ github.repository_owner }}/api-gateway:latest
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/frontend:latest



jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      task-executor: ${{ steps.changes.outputs.task-executor }}
      task-microservice: ${{ steps.changes.outputs.task-microservice }}
      crud-microservice: ${{ steps.changes.outputs.crud-microservice }}
      auth-microservice: ${{ steps.changes.auth-microservice }}
      eureka-server: ${{ steps.changes.outputs.eureka-server}}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          task-executor:
            - 'task-executor/**'
          task-microservice:
            - 'task-microservice/**'
          crud-microservice:
            - 'crud-microservice/**' 
          auth-microservice:
            - 'auth-microservice/**' 
          eureka-server:
            - 'eureka-server/**' 
          api-gateway:
            - 'api-gateway/**' 
          frontend:
            - 'frontend/**' 
            

  build-task-executor:
    needs: changes
    if: ${{ needs.changes.outputs.task-executor == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.11.2
    - name: Build Task-executor
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./${{env.TASK_EXECUTOR_NAME}}/Dockerfile
        push: true
        tags: ${{env.TASK_EXECUTOR_IMAGE}}
        cache-from: type=gha,scope=${{env.TASK_EXECUTOR_NAME}}
        cache-to: type=gha,mode=max,scope=${{env.TASK_EXECUTOR_NAME}}
    
    
  build-task-microservice:
    needs: changes
    if: ${{ needs.changes.outputs.task-microservice == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.11.2
    - name: Build Task-microservice
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./${{env.TASK_MICROSERVICE_NAME}}/Dockerfile
        push: true
        tags: ${{env.TASK_MICROSERVICE_IMAGE}}
        cache-from: type=gha,scope=${{env.TASK_MICROSERVICE_NAME}}
        cache-to: type=gha,mode=max,scope=${{env.TASK_MICROSERVICE_NAME}}
  
  build-crud-microservice:
    needs: changes
    if: ${{ needs.changes.outputs.crud-microservice == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.11.2
    - name: Build Crud-microservice
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./${{env.CRUD_MICROSERVICE_NAME}}/Dockerfile
        push: true
        tags: ${{env.CRUD_MICROSERVICE_IMAGE}}
        cache-from: type=gha,scope=${{env.CRUD_MICROSERVICE_NAME}}
        cache-to: type=gha,mode=max,scope=${{env.CRUD_MICROSERVICE_NAME}}
        
  build-auth-microservice:
    needs: changes
    if: ${{ needs.changes.outputs.auth-microservice == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.11.2
    - name: Build auth-microservice
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./${{env.AUTH_MICROSERVICE_NAME}}/Dockerfile
        push: true
        tags: ${{env.AUTH_MICROSERVICE_IMAGE}}
        cache-from: type=gha,scope=${{env.AUTH_MICROSERVICE_NAME}}
        cache-to: type=gha,mode=max,scope=${{env.AUTH_MICROSERVICE_NAME}}
        
  build-eureka-service:
    needs: changes
    if: ${{ needs.changes.outputs.eureka-service == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
    - name: Setup Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:v0.11.2
    - name: Build eureka-service
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./${{env.EUREKA_SERVICE_NAME}}/Dockerfile
        push: true
        tags: ${{env.EUREKA_SERVICE_IMAGE}}
        cache-from: type=gha,scope=${{env.EUREKA_SERVICE_NAME}}
        cache-to: type=gha,mode=max,scope=${{env.EUREKA_SERVICE_NAME}}
        
  build-api-gateway:
      needs: changes
      if: ${{ needs.changes.outputs.api-gateway == 'true' }}
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
            registry: ghcr.io
            username: ${{github.actor}}
            password: ${{secrets.GITHUB_TOKEN}}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
         driver-opts: |
          image=moby/buildkit:v0.11.2
      - name: Build api-gateway
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./${{env.API_GATEWAY_NAME}}/Dockerfile
          push: true
          tags: ${{env.API_GATEWAY_IMAGE}}
          cache-from: type=gha,scope=${{env.API_GATEWAY_NAME}}
          cache-to: type=gha,mode=max,scope=${{env.API_GATEWAY_NAME}}
          
          
  build-frontend:
      needs: changes
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
            registry: ghcr.io
            username: ${{github.actor}}
            password: ${{secrets.GITHUB_TOKEN}}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
         driver-opts: |
          image=moby/buildkit:v0.11.2
      - name: Build frontend
        uses: docker/build-push-action@v4
        with:
          context: ./${{env.FRONTEND_NAME}}
          push: true
          tags: ${{env.FRONTEND_IMAGE}}
          cache-from: type=gha,scope=${{env.FRONTEND_NAME}}
          cache-to: type=gha,mode=max,scope=${{env.FRONTEND_NAME}}
          
  deploy:
      if: ${{ always() }}
      needs: [build-task-executor, build-task-microservice, build-frontend, build-crud-microservice, build-auth-microservice,build-api-gateway,build-eureka-service]
      runs-on: ubuntu-latest
      steps:
        - name: Deploy
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.PRIVATE_KEY }}
            script: ./deploy.sh
      
